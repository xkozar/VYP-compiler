def incrementRegister(register):
    return f"SET {register}, {register} + 1"

def decrementRegister(register):
    return f"SET {register}, {register} - 1"

class FunctionCodeGenerator:
    stackPointer = '$SP'

    def __init__(self, name):
        self.label = f"LABEL {name}"
        self.header = f'''\t#Function start
\t{incrementRegister(self.stackPointer)}
\tSET [{self.stackPointer}], {self.stackPointer}
\tSET $0, {self.stackPointer}
'''
        self.body = ""
        self.parametersList = []
        self.variablesList = []
        self.returnCall = f"\tRETURN [{self.stackPointer}]"

    def getVariableOffset(self, variable):
        # TODO work with parameter list as well
        if variable in self.variablesList:
            return self.variablesList.index(variable)
        else:
            return self.parametersList.index(variable)
        # TODO proper index of parameters

    def defineVariable(self, variableName):
        self.variablesList.append(variableName)
        self.body += f'''\t#Create variable {variableName}
\tCREATE $1, 1
\t{incrementRegister(self.stackPointer)}
\tSET {self.stackPointer}, $1
'''

    def intLiteralExpression(self, value):
        self.body += f'''\t#Literal expression {value}
\t{incrementRegister(self.stackPointer)}
\tSET [{self.stackPointer}], {value}
'''

    def assignValueToVariable(self, variable):
        self.body += f'''\t# Variable assignment {variable}
\tSET [{self.stackPointer} + {self.getVariableOffset(variable)}], [{self.stackPointer}]
\t{decrementRegister(self.stackPointer)}
'''

    def __str__(self):
        return '\n'.join([self.label, self.header, self.body, self.returnCall])


class CodeGenerator:

    def __init__(self):
        self.header = '''#! /bin/vypint
# VYPcode: 1.0
# Generated by: xkozar02
'''
        self.functionDefinitions = {}
    
    def generateCode(self):
        pass
        print(self.header)
        print("\nJUMP main\n")
        for functionKey in self.functionDefinitions:
            print(str(self.functionDefinitions[functionKey]) + '\n')

    def generateFunctionHeader(self, functionName, functionParameters):
        self.functionDefinitions[functionName] = FunctionCodeGenerator(functionName)
        self.functionDefinitions[functionName].parametersList = functionParameters.copy()

    def defineVariable(self, variableName, functionName):
        self.functionDefinitions[functionName].defineVariable(variableName)

    def generateLiteralExpression(self, functionName, value, literalType):
        if literalType == 'int':
            self.functionDefinitions[functionName].intLiteralExpression(value)
        else:
            pass
        # TODO string

    def assignValueToVariable(self, functionName, variableName):
        self.functionDefinitions[functionName].assignValueToVariable(variableName)

